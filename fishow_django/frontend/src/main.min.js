"use strict";
console.log('start MAIN');
var waitElement = function(e, t) {
    var n = setTimeout(function a() {
      (n = setTimeout(a, 200)),
        document.querySelector(e) &&
          (clearTimeout(n), t(document.querySelectorAll(e)));
    }, 100);
  },
  getCoords = function(e) {
    var t = e.getBoundingClientRect();
    return { top: t.top + pageYOffset, left: t.left + pageXOffset };
  };
document.body.addEventListener("click", function(e) {
  e.target.classList.contains("rd-nav-link") &&
    localStorage.setItem("active_tab", e.target.innerText),
    e.target.classList.contains("fishow-blog_image__close-button") &&
      e.target.parentNode.parentNode.remove();
});
var activeTab = localStorage.getItem("active_tab");
waitElement(".rd-nav-link", function(e) {
  [].slice.call(e).forEach(function(e) {
    e.innerText === activeTab && e.parentNode.classList.toggle("active");
  });
});
var waitLoadingImage = function(e) {
    waitElement("#fishow-picture".concat(e), function(e) {
      addEventHandler(e[0], "change", function() {
        readURL(this);
      });
    });
  },
  counter = 0,
  global_counter = 0,
  addElementOnPage = function(e, t) {
    var n = 0,
      a = 0;
    waitElement(t, function(t) {
      t[0].addEventListener("click", function() {
        var t = document.createElement("div"),
          o = document.createElement("div");
        if (
          (o.classList.add("form-wrap"),
          t.classList.add("fishow-blog_image__close-button"),
          (t.innerText = "x"),
          o.insertAdjacentElement("afterbegin", t),
          "textarea" === e)
        ) {
          global_counter++, n++;
          var c = document.createElement("label"),
            r = document.createElement("textarea"),
            i = document.createElement("span");
          r.classList.add("form-input"),
            r.classList.add("form-control-has-validation"),
            r.classList.add("form-control-last-child"),
            (r.id = "form-text_".concat(n)),
            r.setAttribute(
              "name",
              "text_".concat(n, "_").concat(global_counter)
            ),
            c.classList.add("form-label"),
            c.classList.add("rd-input-label"),
            c.setAttribute("for", "form-text_".concat(n)),
            i.classList.add("form-validation"),
            o.insertAdjacentElement("beforeend", c),
            o.insertAdjacentElement("beforeend", r),
            o.insertAdjacentElement("beforeend", i);
        } else {
          counter++, a++, global_counter++;
          var l = '<input\n                                    class="form-input"\n                                    id="fishow-picture'
            .concat(
              counter,
              '"\n                                    type="file"\n                                    name="picture_'
            )
            .concat(counter, "_")
            .concat(global_counter, '"\n                            />');
          document
            .querySelector(".fishow_button_picture .fishow_action_btn")
            .insertAdjacentHTML("beforebegin", l),
            waitLoadingImage(counter),
            document.getElementById("fishow-picture".concat(counter)).click();
          var s = document.createElement("img");
          (s.src = "#"),
            (s.width = "500"),
            (s.height = "500"),
            s.setAttribute("data-image", a),
            (s.id = "form-image_".concat(counter)),
            s.setAttribute(
              "name",
              "image_".concat(counter, "_").concat(global_counter)
            ),
            o.classList.add("fishow-blog_image"),
            o.insertAdjacentElement("beforeend", s);
        }
        var d = document.createElement("div");
        d.classList.add("col-md-12"),
          d.classList.add("fishow-content"),
          d.insertAdjacentElement("afterbegin", o);
        var u = document.querySelectorAll(".fishow-content");
        u[u.length - 1].insertAdjacentElement("afterend", d);
      });
    });
  };
addElementOnPage("textarea", ".fishow_button_text .fishow_action_btn"),
  addElementOnPage("picture", ".fishow_button_picture .fishow_action_btn");
var addEventHandler = function(e, t, n) {
    e.addEventListener
      ? e.addEventListener(t, n, !1)
      : e.attachEvent && e.attachEvent("on" + t, n);
  },
  readURL = function(e) {
    if (e.files && e.files[0]) {
      var t = new FileReader();
      (t.onload = function(e) {
        document
          .querySelectorAll(".fishow-blog_image img")
          [
            document.querySelectorAll(".fishow-blog_image img").length - 1
          ].setAttribute("src", e.target.result);
      }),
        t.readAsDataURL(e.files[0]);
    }
  },
  delSpaces = function(e) {
    return e.replace(/\s/g, "");
  };
document.querySelectorAll("[data-vote-status]").forEach(function(e) {
  return console.log(e.getAttribute("data-vote-status"));
});
var handler = function(e, t) {
    var n = ".fishow-votes_up" === t ? "like" : "dislike";
    console.log("like dislike? = ", n);
    var a = parseInt(e.parentNode.querySelector("[data-votes-counter]").id),
      o = e.parentNode
        .querySelector("[data-vote-status]")
        .getAttribute("data-vote-status");
    (o = delSpaces(o)),
      console.log("voteStatus = ", o),
      fetch("http://127.0.0.1:8000/", {
        credentials: "include",
        headers: {
          Accept: "*/*",
          "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
          "X-Requested-With": "XMLHttpRequest",
          Pragma: "no-cache",
          "Cache-Control": "no-cache"
        },
        referrer: "http://127.0.0.1:8000/",
        body: "id_item=".concat(a, "&type_buttons=").concat(n),
        method: "POST",
        mode: "cors"
      }).then(function(e) {
        return (
          500 === e.status
            ? console.error("ошбика запроса")
            : 200 === e.status && (console.table(e), console.log("fine")),
          e
        );
      });
  },
  doVote = function(e) {
    waitElement(e, function(t) {
      [].slice.call(t).forEach(function(t) {
        t.addEventListener("click", function(t) {
          return handler(t.currentTarget.parentNode, e);
        });
      });
    });
  };
doVote(".fishow-votes_down"), doVote(".fishow-votes_up");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
